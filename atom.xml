<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Inti&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://intii.com/"/>
  <updated>2018-04-02T05:45:07.468Z</updated>
  <id>http://intii.com/</id>
  
  <author>
    <name>Inti Guo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://intii.com/2018/reference-to-a-value-type-property/"/>
    <id>http://intii.com/2018/reference-to-a-value-type-property/</id>
    <published>2018-04-02T03:45:56.123Z</published>
    <updated>2018-04-02T05:45:07.468Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>title: 如何引用一个值类型属性<br>date: 2018-3-13 14:21:00<br>tags: </p>
<pre><code>- Swift
- iOS
- Key Path
- ReferenceWritableKeyPath
- Reference
- Value Type
</code></pre><hr>
<p>在更新 Best Before 的过程中，我决定重写 <code>ForwardStrategy</code> 的部分。过去 <code>ForwardStrategy</code> 中不同的转发目标所储存的信息其实是一样的，只是不同的转发目标会隐藏其不包含的属性。因此其对应的表单也是这样设计的，表单中其实包含了所有属性对应的 cell，但是在选中某些目标时，其中一些 cell 被隐藏起来了。</p>
<p>举个例子吧：比如说我们有 Things 和 Mail 两种转发目标，当我们选中 Things 时，因为它并没有收件人，所以其对应的 cell 被隐藏起来了。当我们切换到 Mail，收件人就得以重见天日，但截止日期却被隐藏起来了。这个方案当然是 work 的，但是却有一个明显的缺点，一旦我们需要添加新的转发目标，或更新旧有的转发目标时出现了新的属性时，我们就需要修改模型，并在表单中增加新的 cell 了。</p>
<p>因此在这次更新中，我决定将转发目标的属性以 JSON 为格式储存，这也避免了不同转发目标混用属性的尴尬。表单方面也需要作出修改。窒息观察可以发现，这些属性有几个固定的类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ForwardFormElement</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> highlightTextView(title: <span class="type">String</span>, placeholder: <span class="type">String</span>?, bind: <span class="type">PropertyRefTo</span>&lt;<span class="type">String</span>&gt;)</div><div class="line">    <span class="keyword">case</span> textView(title: <span class="type">String</span>, placeholder: <span class="type">String</span>?, bind: <span class="type">PropertyRefTo</span>&lt;<span class="type">String</span>&gt;)</div><div class="line">    <span class="keyword">case</span> textField(title: <span class="type">String</span>, placeholder: <span class="type">String</span>?, keyboardType: <span class="type">UIKeyboardType</span>, bind: <span class="type">PropertyRefTo</span>&lt;<span class="type">String</span>&gt;)</div><div class="line">    <span class="keyword">case</span> picker(title: <span class="type">String</span>, options: [<span class="type">String</span>], bind: <span class="type">PropertyRefTo</span>&lt;<span class="type">Int</span>&gt;)</div><div class="line">    <span class="keyword">case</span> toggle(title: <span class="type">String</span>, bind: <span class="type">PropertyRefTo</span>&lt;<span class="type">Bool</span>&gt;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们只需要提供每一种转发目标的 <code>[ForwardFormElement]</code>，就能依次利用 Form Builder 生成相应的表单了。同时也为了契合我在用的 Form Builder 的特点，我希望在生成每一个 <code>Row</code> 时能够通过它的 <code>onChange</code> 方法将变动绑定到转发目标的相关属性上。这才有了本篇文章的主题。</p>
<a id="more"></a>
<p>先梳理一下，我希望的结果是：</p>
<ol>
<li>转发目标提供 <code>[ForwardFormElement]</code> 给 Form Builder</li>
<li>ForwardFormElement 中包含了一个对转发目标属性的弱引用</li>
<li>Form Builder 生成 <code>Row</code> 时通过 <code>onChange</code> 方法绑定属性<br> <code>row.onChange { bind.val = $0 }</code></li>
<li><code>bind.val</code> 改变时同时改变转发目标的相关属性（很可能是值类型）</li>
</ol>
<p>那么接下来就是怎么实现 <code>bind: PropertyRefTo&lt;T&gt;</code> 的问题了。</p>
<p>很简单，Swift 4 给我们带来了 KeyPath subscription，只要我们持有转发目标的弱引用，然后再存对应的 KeyPath 就好了。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyRefTo</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">var</span> val: <span class="type">V</span>?</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyRef</span>&lt;<span class="title">O</span>: <span class="title">AnyObject</span>, <span class="title">V</span>&gt;: <span class="title">PropertyRefTo</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> object: <span class="type">O</span>?</div><div class="line">    <span class="keyword">let</span> keyPath: <span class="type">ReferenceWritableKeyPath</span>&lt;<span class="type">O</span>, <span class="type">V</span>&gt;</div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(<span class="number">_</span> object: <span class="type">O</span>, <span class="number">_</span> keyPath: <span class="type">ReferenceWritableKeyPath</span>&lt;<span class="type">O</span>, <span class="type">V</span>&gt;) &#123;</div><div class="line">        <span class="keyword">self</span>.object = object</div><div class="line">        <span class="keyword">self</span>.keyPath = keyPath</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="keyword">var</span> val: <span class="type">V</span>? &#123;</div><div class="line">        <span class="keyword">get</span> &#123;</div><div class="line">            <span class="keyword">return</span> object?[keyPath: keyPath]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">set</span> &#123;</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> v = newValue <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            object?[keyPath: keyPath] = v</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>能用吗？能用。但是我还有一个额外的需求，有一些对应 <code>case picker(title: String, options: [String], bind: PropertyRefTo&lt;Int&gt;)</code> 的属性是 Enum，但 Swift 并没有 Generic Case 这样的东西，所以我们要让 <code>PropertyRef</code> 能够按照我们的要求将其 <code>val</code> 转换成我们需要的类型。显而易见，不提供 <code>object</code> 和 <code>keyPath</code>，而是提供 <code>val</code> 的 getter 和 setter 不就好了吗。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(<span class="number">_</span> object: <span class="type">O</span>, getter: @escaping (<span class="type">O</span>)-&gt;<span class="type">V</span>?, setter: @escaping (<span class="type">O</span>, <span class="type">V</span>)-&gt;<span class="type">Void</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.getter = &#123;</div><div class="line">        [<span class="keyword">weak</span> object] <span class="keyword">in</span> <span class="keyword">guard</span> <span class="keyword">let</span> object = object <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125;</div><div class="line">        <span class="keyword">return</span> getter(object)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">self</span>.setter = &#123;</div><div class="line">        [<span class="keyword">weak</span> object] newValue <span class="keyword">in</span> <span class="keyword">guard</span> <span class="keyword">let</span> object = object <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        setter(object, newValue)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在 block 里通过 capture list 弱引用 <code>object</code>，因为这么写了，所以我们要求 <code>O: AnyObject</code>。最后 Key Path 这种这么方便的东西，我们也可以提供一个 convenience initializer。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="number">_</span> object: <span class="type">O</span>, <span class="number">_</span> keyPath: <span class="type">ReferenceWritableKeyPath</span>&lt;<span class="type">O</span>, <span class="type">V</span>&gt;) &#123;</div><div class="line">    <span class="keyword">self</span>.<span class="keyword">init</span>(object, getter: &#123; $<span class="number">0</span>[keyPath: keyPath] &#125;, setter: &#123; $<span class="number">0</span>[keyPath: keyPath] = $<span class="number">1</span> &#125; )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此我们就能获得一个 <code>AnyObject</code> 的非引用类型的属性的引用啦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;title: 如何引用一个值类型属性&lt;br&gt;date: 2018-3-13 14:21:00&lt;br&gt;tags: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Swift
- iOS
- Key Path
- ReferenceWritableKeyPath
- Reference
- Value Type
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;p&gt;在更新 Best Before 的过程中，我决定重写 &lt;code&gt;ForwardStrategy&lt;/code&gt; 的部分。过去 &lt;code&gt;ForwardStrategy&lt;/code&gt; 中不同的转发目标所储存的信息其实是一样的，只是不同的转发目标会隐藏其不包含的属性。因此其对应的表单也是这样设计的，表单中其实包含了所有属性对应的 cell，但是在选中某些目标时，其中一些 cell 被隐藏起来了。&lt;/p&gt;
&lt;p&gt;举个例子吧：比如说我们有 Things 和 Mail 两种转发目标，当我们选中 Things 时，因为它并没有收件人，所以其对应的 cell 被隐藏起来了。当我们切换到 Mail，收件人就得以重见天日，但截止日期却被隐藏起来了。这个方案当然是 work 的，但是却有一个明显的缺点，一旦我们需要添加新的转发目标，或更新旧有的转发目标时出现了新的属性时，我们就需要修改模型，并在表单中增加新的 cell 了。&lt;/p&gt;
&lt;p&gt;因此在这次更新中，我决定将转发目标的属性以 JSON 为格式储存，这也避免了不同转发目标混用属性的尴尬。表单方面也需要作出修改。窒息观察可以发现，这些属性有几个固定的类型：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ForwardFormElement&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; highlightTextView(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, placeholder: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?, bind: &lt;span class=&quot;type&quot;&gt;PropertyRefTo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; textView(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, placeholder: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?, bind: &lt;span class=&quot;type&quot;&gt;PropertyRefTo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; textField(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, placeholder: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;?, keyboardType: &lt;span class=&quot;type&quot;&gt;UIKeyboardType&lt;/span&gt;, bind: &lt;span class=&quot;type&quot;&gt;PropertyRefTo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&amp;gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; picker(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, options: [&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;], bind: &lt;span class=&quot;type&quot;&gt;PropertyRefTo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&amp;gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; toggle(title: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, bind: &lt;span class=&quot;type&quot;&gt;PropertyRefTo&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;&amp;gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只需要提供每一种转发目标的 &lt;code&gt;[ForwardFormElement]&lt;/code&gt;，就能依次利用 Form Builder 生成相应的表单了。同时也为了契合我在用的 Form Builder 的特点，我希望在生成每一个 &lt;code&gt;Row&lt;/code&gt; 时能够通过它的 &lt;code&gt;onChange&lt;/code&gt; 方法将变动绑定到转发目标的相关属性上。这才有了本篇文章的主题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>用 Blend Mode 来让 Navigation Bar 骚气起来</title>
    <link href="http://intii.com/2018/decorate-uinavigationbar-with-blend-mode/"/>
    <id>http://intii.com/2018/decorate-uinavigationbar-with-blend-mode/</id>
    <published>2018-03-13T06:21:00.000Z</published>
    <updated>2018-03-14T14:49:27.180Z</updated>
    
    <content type="html"><![CDATA[<p>最近又在更新 Best Before.app，算是把同步写好了，但是还是打算顺便更新一下 UI。之前加入了自定义分类的功能，还允许用户给分类设置一个颜色，但是这个颜色却没有什么实际的作用，在这次更新中我打算在 Navigation Bar 上面显示出这个颜色。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/old.png" width="375px" alt="old"/></p>
<p>应该怎么显示呢，一开始我的想法是让分类名称的第一个字符设置为这个颜色。尽管 <code>UINavigationBar</code> 并没有给我们提供一个 API 去做这个事情，我们还是能够很暴力地从其众多的 <code>subviews</code> 的 <code>subviews</code> 当中，找到这些 <code>UILabel</code>。如果 iOS 还没到 11，这就足够了，但是 iOS 11 中却引入了 Large Title，而即便我们修改了 Large Title 的 <code>attributedString</code>，它也会在我们拖动底下的 scroll view 时打回原形。</p>
<p>很讨厌。</p>
<a id="more"></a>
<p>这时我想起了 Sketch 中 Blend Mode，在 Sketch 用 Blend Mode Lighten 能够将颜色附着在图标上，虽然没法简单地定位到刚好只覆盖到第一个字符，但好像也挺拉风的，于是我在 Sketch 里面做了一些修改。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/new.png" width="375px" alt="new"/></p>
<p>那 iOS 上是否有这样的功能呢。</p>
<p>居然有，我们只需要在 <code>UINavigationBar</code> 上添加一个 <code>CALayer</code>，并将其的 <code>compositingFilter</code> 赋值为 <code>lightenBlendMode</code> 就可以了。同时还要 observe Navigation Bar 的 <code>frame</code> 以随着它的高度变动修改这个 layer 的 <code>path</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNavigationBarBlending</span><span class="params">()</span></span> &#123;</div><div class="line">    blendLayer = &#123;</div><div class="line">        <span class="keyword">let</span> it = <span class="type">CAShapeLayer</span>()</div><div class="line">        it.compositingFilter = <span class="string">"lightenBlendMode"</span></div><div class="line">        navigationBar.layer.addSublayer(it)</div><div class="line">        <span class="keyword">let</span> observation = navigationBar.observe(\.frame) &#123; bar, <span class="number">_</span> <span class="keyword">in</span></div><div class="line">            it.path = <span class="type">UIBezierPath</span>(rect: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, </div><div class="line">                                                width: <span class="number">50</span>, </div><div class="line">                                                height: bar.frame.height)).cgPath</div><div class="line">        &#125;</div><div class="line">        disposables.append(observation)</div><div class="line">        <span class="keyword">return</span> it</div><div class="line">    &#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们只需要在显示分类列表时，修改 <code>blendLayer</code> 的 <code>fillColor</code> 就行了。值得一提的是 <code>UINavigationBar.frame</code> 恰好只包含到了 Large Title View，并不包括搜索框。</p>
<p>当然如果再花些功夫，也还是能让它只覆盖到第一个字符的，但是也没必要了吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近又在更新 Best Before.app，算是把同步写好了，但是还是打算顺便更新一下 UI。之前加入了自定义分类的功能，还允许用户给分类设置一个颜色，但是这个颜色却没有什么实际的作用，在这次更新中我打算在 Navigation Bar 上面显示出这个颜色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/old.png&quot; width=&quot;375px&quot; alt=&quot;old&quot;/&gt;&lt;/p&gt;
&lt;p&gt;应该怎么显示呢，一开始我的想法是让分类名称的第一个字符设置为这个颜色。尽管 &lt;code&gt;UINavigationBar&lt;/code&gt; 并没有给我们提供一个 API 去做这个事情，我们还是能够很暴力地从其众多的 &lt;code&gt;subviews&lt;/code&gt; 的 &lt;code&gt;subviews&lt;/code&gt; 当中，找到这些 &lt;code&gt;UILabel&lt;/code&gt;。如果 iOS 还没到 11，这就足够了，但是 iOS 11 中却引入了 Large Title，而即便我们修改了 Large Title 的 &lt;code&gt;attributedString&lt;/code&gt;，它也会在我们拖动底下的 scroll view 时打回原形。&lt;/p&gt;
&lt;p&gt;很讨厌。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://intii.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://intii.com/tags/iOS/"/>
    
      <category term="UINavigationBar" scheme="http://intii.com/tags/UINavigationBar/"/>
    
      <category term="iOS 11" scheme="http://intii.com/tags/iOS-11/"/>
    
      <category term="Large Title" scheme="http://intii.com/tags/Large-Title/"/>
    
      <category term="Customization" scheme="http://intii.com/tags/Customization/"/>
    
      <category term="Blending Mode" scheme="http://intii.com/tags/Blending-Mode/"/>
    
  </entry>
  
  <entry>
    <title>新头像，超清猎人</title>
    <link href="http://intii.com/2018/avatar-uhd-hunter/"/>
    <id>http://intii.com/2018/avatar-uhd-hunter/</id>
    <published>2018-01-21T10:21:31.000Z</published>
    <updated>2018-03-13T04:30:56.787Z</updated>
    
    <content type="html"><![CDATA[<p>热烈庆祝 MHW 面世。<br><a id="more"></a><br><img src="/media/avatar-uhd-hunter.jpg" alt="avatar-charge-blade-maste"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热烈庆祝 MHW 面世。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codable Enum with Associated Values</title>
    <link href="http://intii.com/2017/codable-enum-with-associated-values/"/>
    <id>http://intii.com/2017/codable-enum-with-associated-values/</id>
    <published>2017-10-19T06:21:00.000Z</published>
    <updated>2017-12-20T08:55:08.173Z</updated>
    
    <content type="html"><![CDATA[<p>我们决定在项目中使用 JSON 来储存每一个章节的信息，于是就出现了一个需求，JSON 里面的数组里可能会存在多种 Object，要举个栗子的话，就是一台战舰上可能会同时搭载了一些 Mobile Suits 和 Mobile Armor，而且它们还是放在一块儿的，却又有着不同类型的属性。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/msandma.png" width="340px"></p>
<p>既然我们在用 Swift，就很自然的想用 Enum 来表示它们：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Unit</span>: <span class="title">Codable</span> </span>&#123;            <span class="comment">// &#123;</span></div><div class="line">    <span class="keyword">case</span> mobileArmor(           <span class="comment">//   "type": "mobile-armor",</span></div><div class="line">        numberOfPilots: <span class="type">Int</span>     <span class="comment">//   "number-of-pilots": 2</span></div><div class="line">    )                           <span class="comment">// &#125;,</span></div><div class="line">                                <span class="comment">// &#123;</span></div><div class="line">    <span class="keyword">case</span> mobileSuit(            <span class="comment">//   "type": "mobile-suit"</span></div><div class="line">        numberOfLegs: <span class="type">Int</span>,      <span class="comment">//   "number-of-leg": 2,</span></div><div class="line">        isGundam: <span class="type">Bool</span>          <span class="comment">//   "is-gundam": true</span></div><div class="line">    )                           <span class="comment">// &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于 Mobile Armor，它可能需要好几个驾驶员负责四肢和头部，但对于 Mobile Suit，上头则更在乎它们有多少只脚，以及<ruby>是不是高达<rt>有没有光环</rt></ruby>。当我们直接加上 <code>Codable</code>，Compiler 就报错了，显然我们需要手动做一些什么奇怪的事情才行。</p>
<a id="more"></a>
<p>易知，Compiler 没有恰当的手段给我们自动生成 <code>CodingKey</code>，对于普通的 Enum，我们可以指定 Enum 的 raw value 的类型来解决问题，但带有 associated values 的 Enum 则不允许我们这么做，所以我们得手动添加 <code>CodingKey</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> type</div><div class="line">    <span class="keyword">case</span> numberOfLegs = <span class="string">"number-of-legs"</span>, isGundam = <span class="string">"is-gundam"</span></div><div class="line">    <span class="keyword">case</span> numberOfPilots = <span class="string">"number-of-pilots"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们还需要实现 <code>init(from decoder: Decoder)</code>：  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">let</span> values = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">let</span> type = <span class="keyword">try</span> container.decode(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .type)</div><div class="line">        </div><div class="line">    <span class="keyword">switch</span> type &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"mobile-suit"</span>:</div><div class="line">        <span class="keyword">let</span> numberOfLegs = <span class="keyword">try</span> values.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .numberOfLegs)</div><div class="line">        <span class="keyword">let</span> isGundam = <span class="keyword">try</span> values.decode(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .isGundam)</div><div class="line">        <span class="keyword">self</span> = .mobileSuit(numberOfLegs: numberOfLegs, isGundam: isGundam)</div><div class="line">    <span class="keyword">case</span> <span class="string">"mobile-armor"</span>:</div><div class="line">        <span class="keyword">let</span> numberOfPilots = <span class="keyword">try</span> values.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .numberOfPilots)</div><div class="line">        <span class="keyword">self</span> = .mobileArmor(numberOfPilots: numberOfPilots)</div><div class="line">    <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="type">UnitError</span>.decoding(<span class="string">"error"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样把不同 case 的 coding keys 都放在一起是比较危险的，即便是新人类或者调整者，也不能保证不会手残，在生成 MS 资料的时候去读取了一个不存在的、属于 MA 的 key。所以要是想再 type safe 一些的话，可以把不同 case 的 coding keys 放在不同的 Enum 里面，防止敲错 key：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">MobileArmorCodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> numberOfPilots = <span class="string">"number-of-pilots"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> &#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">case</span> <span class="string">"mobile-armor"</span>:</div><div class="line">        <span class="keyword">let</span> values = <span class="keyword">try</span> decoder.container(keyedBy: <span class="type">MobileArmorCodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">let</span> numberOfPilots = <span class="keyword">try</span> values.decode(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .numberOfPilots)</div><div class="line">        <span class="keyword">self</span> = .mobileArmor(numberOfPilots: numberOfPilots)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Encode 部分也是同理：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(to encoder: Encoder)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">    <span class="keyword">var</span> container = encoder.container(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .mobileSuit(numberOfLegs, isGundam):</div><div class="line">        <span class="keyword">try</span> container.encode(<span class="string">"mobile-suit"</span>, forKey: .type)</div><div class="line">        <span class="keyword">var</span> values = encoder.container(keyedBy: <span class="type">MobileSuitCodingKeys</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">try</span> values.encode(isGundam, forKey: .isGundam)</div><div class="line">        <span class="keyword">try</span> values.encode(numberOfLegs, forKey: .numberOfLegs)</div><div class="line">    <span class="keyword">case</span> .mobileArmor(<span class="keyword">let</span> numberOfPilots):...</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> json =＂＂＂</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"mobile-suit"</span>,</div><div class="line">        <span class="string">"is-gundam"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">"number-of-legs"</span>: <span class="number">4</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"type"</span>: <span class="string">"mobile-armor"</span>,</div><div class="line">        <span class="string">"number-of-pilots"</span>: <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">]</div><div class="line">＂＂＂</div><div class="line"></div><div class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</div><div class="line"><span class="keyword">let</span> result = <span class="keyword">try</span>! decoder.decode([<span class="type">Unit</span>].<span class="keyword">self</span>, from: json.data(using: .utf8)!)</div><div class="line"><span class="comment">// [Unit.mobileSuit(numberOfLegs: 4, isGundam: true), Unit.mobileArmor(2)]</span></div><div class="line"><span class="keyword">let</span> encoder = <span class="type">JSONEncoder</span>()</div><div class="line"><span class="keyword">let</span> data = <span class="keyword">try</span>! encoder.encode(result)</div><div class="line"><span class="comment">// [&#123;"type":"mobile-suit","number-of-legs":4,"is-gundam":true&#125;,&#123;"type":"mobile-armor","number-of-pilots":2&#125;]</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们决定在项目中使用 JSON 来储存每一个章节的信息，于是就出现了一个需求，JSON 里面的数组里可能会存在多种 Object，要举个栗子的话，就是一台战舰上可能会同时搭载了一些 Mobile Suits 和 Mobile Armor，而且它们还是放在一块儿的，却又有着不同类型的属性。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/msandma.png&quot; width=&quot;340px&quot;&gt;&lt;/p&gt;
&lt;p&gt;既然我们在用 Swift，就很自然的想用 Enum 来表示它们：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Unit&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Codable&lt;/span&gt; &lt;/span&gt;&amp;#123;            &lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; mobileArmor(           &lt;span class=&quot;comment&quot;&gt;//   &quot;type&quot;: &quot;mobile-armor&quot;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        numberOfPilots: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;//   &quot;number-of-pilots&quot;: 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )                           &lt;span class=&quot;comment&quot;&gt;// &amp;#125;,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; mobileSuit(            &lt;span class=&quot;comment&quot;&gt;//   &quot;type&quot;: &quot;mobile-suit&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        numberOfLegs: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,      &lt;span class=&quot;comment&quot;&gt;//   &quot;number-of-leg&quot;: 2,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        isGundam: &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;          &lt;span class=&quot;comment&quot;&gt;//   &quot;is-gundam&quot;: true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    )                           &lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于 Mobile Armor，它可能需要好几个驾驶员负责四肢和头部，但对于 Mobile Suit，上头则更在乎它们有多少只脚，以及&lt;ruby&gt;是不是高达&lt;rt&gt;有没有光环&lt;/rt&gt;&lt;/ruby&gt;。当我们直接加上 &lt;code&gt;Codable&lt;/code&gt;，Compiler 就报错了，显然我们需要手动做一些什么奇怪的事情才行。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://intii.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://intii.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>像写 Swift 那样写 Objective-C</title>
    <link href="http://intii.com/2017/write-objc-like-writing-swift/"/>
    <id>http://intii.com/2017/write-objc-like-writing-swift/</id>
    <published>2017-08-11T14:23:10.000Z</published>
    <updated>2017-12-20T08:55:45.072Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始工作了，为了配合队友，得写 Objective-C。写 Objective-C 的时候，有一个糟心的地方就是定义一个变量的时候：写下一个变量之前，首先映入我的脑海的是如何优雅地命名这个变量，但我却要先写它的类型；而且这个类型还经常需要写两遍，当这种重复的事情做多了，很容易烦躁起来；还有那个星号。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIView</span> *anElegantView = [<span class="built_in">UIView</span> new];</div><div class="line">WaitASecICantRememberThatRightNow *something = array.firstObject;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>所幸的是，从 PSPDFKit 团队的文章 <a href="https://pspdfkit.com/blog/2017/even-swiftier-objective-c/">Even Swiftier Objective-C</a> 中可以得知，原来苹果在不知道什么时候给 Objective-C 带来了类型推导，现在我们可以将上面的代码写成：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__auto_type anElegantView = [<span class="built_in">UIView</span> new];</div><div class="line">__auto_type something = (TheType *)array.firstObject;</div><div class="line"></div><div class="line"><span class="comment">// 如果 array 使用了 lightweight generics </span></div><div class="line">__auto_type something = array.firstObject;</div></pre></td></tr></table></figure>
<p>这下写法总算和 Swift 相似了一些。PSPDFKit 团队没有停下脚步，又定义了一些宏。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define let __auto_type const</span></div><div class="line"><span class="meta">#define var __auto_type </span></div><div class="line"></div><div class="line">let anElegantView = [<span class="built_in">UIView</span> new];</div><div class="line">let something = (TheType *)array.firstObject;</div><div class="line">var something = array.firstObject;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> anElegantView = <span class="type">UIView</span>()</div><div class="line"><span class="keyword">let</span> something: <span class="type">TheType</span> = array.first</div><div class="line"><span class="keyword">var</span> something = array.first</div></pre></td></tr></table></figure>
<p>再给 <code>NSArray</code> 和 <code>NSMutableArray</code> 加上 <code>map filter</code> 那些，一下子觉得舒服多了。更多更详细的骚操作请看他们的文章。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近开始工作了，为了配合队友，得写 Objective-C。写 Objective-C 的时候，有一个糟心的地方就是定义一个变量的时候：写下一个变量之前，首先映入我的脑海的是如何优雅地命名这个变量，但我却要先写它的类型；而且这个类型还经常需要写两遍，当这种重复的事情做多了，很容易烦躁起来；还有那个星号。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *anElegantView = [&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; new];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;WaitASecICantRememberThatRightNow *something = array.firstObject;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="http://intii.com/tags/Swift/"/>
    
      <category term="iOS" scheme="http://intii.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://intii.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>也可以这样展示书籍封面？</title>
    <link href="http://intii.com/2017/a-better-way-to-display-a-book-cover-questionmark/"/>
    <id>http://intii.com/2017/a-better-way-to-display-a-book-cover-questionmark/</id>
    <published>2017-04-28T14:30:13.000Z</published>
    <updated>2017-04-29T13:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周赶着要交一个作业，原本是想着开新的项目写一部分交上去的，后来进度太糟糕，就打算另辟蹊径。只剩下几天时间，偶然看 Dribbble 的时候看到了一个豆瓣图书的客户端，觉得要不写个扫码获取书本资料的 app 吧，简单，又符合题意，又能顺便写写 Objective-C 练习一下，便以 <code>Book Shelf</code> 为关键词在 Dribbble 上搜索一番，发现<a href="https://dribbble.com/shots/3116835-Bookshelf">有个设计</a>很棒。它展示的书籍封面是立体的，打开大图仔细一看，发现事情没有那么简单，看起来像是在一张平面的封面上，切了角，打了高光加了阴影，却高大上了许多。</p>
<p>先是在 Sketch 里面试了试。</p>
<object class="svg" style="width: 100%;" data="/media/displaying-book-cover.svg" type="image/svg+xml"><br>  <img src="http://o7kolop30.bkt.clouddn.com/displaying-book-cover.png" /><br></object>

<a id="more"></a>
<p>具体实现简单粗暴，就是<a href="https://github.com/int123c/StallApp/blob/master/Stall/BookView.m">上面罩了一堆 <code>CALayer</code></a>（</p>
<p>具体效果：<br><img src="http://o7kolop30.bkt.clouddn.com/IMG_2204.png" style="width:400px;" /></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周赶着要交一个作业，原本是想着开新的项目写一部分交上去的，后来进度太糟糕，就打算另辟蹊径。只剩下几天时间，偶然看 Dribbble 的时候看到了一个豆瓣图书的客户端，觉得要不写个扫码获取书本资料的 app 吧，简单，又符合题意，又能顺便写写 Objective-C 练习一下，便以 &lt;code&gt;Book Shelf&lt;/code&gt; 为关键词在 Dribbble 上搜索一番，发现&lt;a href=&quot;https://dribbble.com/shots/3116835-Bookshelf&quot;&gt;有个设计&lt;/a&gt;很棒。它展示的书籍封面是立体的，打开大图仔细一看，发现事情没有那么简单，看起来像是在一张平面的封面上，切了角，打了高光加了阴影，却高大上了许多。&lt;/p&gt;
&lt;p&gt;先是在 Sketch 里面试了试。&lt;/p&gt;
&lt;object class=&quot;svg&quot; style=&quot;width: 100%;&quot; data=&quot;/media/displaying-book-cover.svg&quot; type=&quot;image/svg+xml&quot;&gt;&lt;br&gt;  &lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/displaying-book-cover.png&quot; /&gt;&lt;br&gt;&lt;/object&gt;
    
    </summary>
    
    
      <category term="Design" scheme="http://intii.com/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>新头像，盾斧使</title>
    <link href="http://intii.com/2017/new-avatar-charge-blade-master/"/>
    <id>http://intii.com/2017/new-avatar-charge-blade-master/</id>
    <published>2017-03-08T10:21:31.000Z</published>
    <updated>2017-04-27T04:22:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>还有十天 MHXX 就要发售了，非常地期待，于是最近坐火车的时候都会掏出 3DS 来玩玩 MHX。MHX 里面最喜欢的武器还是盾斧，刚开始玩的时候用的都是武士道风格，最近试了试强袭风格，觉得还是挺不错的。</p>
<p>这次的头像参考了某雌火龙套装 + 盾斧的手办，虽然只带了头盔，<del>但居然也是女装哦</del>。武器看起来是工会盾斧，没有认真画，歪七扭八的。<br><a id="more"></a></p>
<p><img src="/media/avatar-charge-blade-master.jpg" alt="avatar-charge-blade-maste"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还有十天 MHXX 就要发售了，非常地期待，于是最近坐火车的时候都会掏出 3DS 来玩玩 MHX。MHX 里面最喜欢的武器还是盾斧，刚开始玩的时候用的都是武士道风格，最近试了试强袭风格，觉得还是挺不错的。&lt;/p&gt;
&lt;p&gt;这次的头像参考了某雌火龙套装 + 盾斧的手办，虽然只带了头盔，&lt;del&gt;但居然也是女装哦&lt;/del&gt;。武器看起来是工会盾斧，没有认真画，歪七扭八的。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>将豆瓣收藏保存到 Day One 的一个正确方式</title>
    <link href="http://intii.com/2017/saving-douban-fav-to-dayone-the-correct-way/"/>
    <id>http://intii.com/2017/saving-douban-fav-to-dayone-the-correct-way/</id>
    <published>2017-01-23T15:30:52.000Z</published>
    <updated>2017-01-24T06:21:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道豆瓣是怎么考虑的，豆瓣收藏的 RSS 并没有给出电影海报／书封面的大图，每次看到 Day One 里存了的那张迷你海报就不舒服( ･᷄ὢ･᷅ )。有一个曲线救国的方式是将豆瓣收藏同步到新浪微博，再用 IFTTT 将新浪微博同步到 Day One 里。然而我不用新浪微博很久了，突然在上面发些什么东西总觉得有些不妥，而且这个方法要求在收藏的时候添加一个 tag 以区别它们与其它微博，不够干爽。</p>
<p>突然今天看到<a href="http://www.appinn.com/integromat/">小众软件推荐了 Integromat</a>，这个产品类似于 IFTTT，但能串联很多任务，甚至包括了正则表达式匹配，再配合 IFTTT 就能将拥有大图的豆瓣收藏保存到 Day One 里了。</p>
<a id="more"></a>
<p>豆瓣开放给任意人使用的电影／图书信息 API 里并没有包含大图的链接，但仔细看能够发现：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 电影</div><div class="line">img3.doubanio.com/view/movie_poster_cover/ipst/public/p2391300344.jpg // 小图</div><div class="line">img3.doubanio.com/view/movie_poster_cover/lpst/public/p2391300344.jpg // 大图</div><div class="line"></div><div class="line">// 图书</div><div class="line">img3.doubanio.com/spic/s28416025.jpg // 小图</div><div class="line">img3.doubanio.com/lpic/s28416025.jpg // 大图</div></pre></td></tr></table></figure>
<p>不就差了一个字母而已嘛可恶。你看到是哪个字母了吗可恶。</p>
<p>所以只需要在 Integromat 里用正则表达式匹配前后两部分再拼起来再利用 IFTTT Maker channel 发送到 Day One 就可以了。简直浪费人生。</p>
<p><del>Integromat 的客服不错，之前我正则表达式写错了他们还帮我改好了（</del></p>
<p>干这种事情用免费版就足够了。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Screen Shot 2017-01-23 at 11.28.29 PM-1.png" alt="Scenario in Integromat"></p>
<p>最后终于能看到大图啦好高兴。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Screen Shot 2017-01-23 at 11.24.32 PM.png" alt="Douban Fav with Large Album Picture"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道豆瓣是怎么考虑的，豆瓣收藏的 RSS 并没有给出电影海报／书封面的大图，每次看到 Day One 里存了的那张迷你海报就不舒服( ･᷄ὢ･᷅ )。有一个曲线救国的方式是将豆瓣收藏同步到新浪微博，再用 IFTTT 将新浪微博同步到 Day One 里。然而我不用新浪微博很久了，突然在上面发些什么东西总觉得有些不妥，而且这个方法要求在收藏的时候添加一个 tag 以区别它们与其它微博，不够干爽。&lt;/p&gt;
&lt;p&gt;突然今天看到&lt;a href=&quot;http://www.appinn.com/integromat/&quot;&gt;小众软件推荐了 Integromat&lt;/a&gt;，这个产品类似于 IFTTT，但能串联很多任务，甚至包括了正则表达式匹配，再配合 IFTTT 就能将拥有大图的豆瓣收藏保存到 Day One 里了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2016 年总结</title>
    <link href="http://intii.com/2016/summary-of-2016/"/>
    <id>http://intii.com/2016/summary-of-2016/</id>
    <published>2016-12-30T13:37:32.000Z</published>
    <updated>2016-12-30T15:48:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>如同往常一样，今年定下了很多目标，达成了没几个，很多遗憾。</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如同往常一样，今年定下了很多目标，达成了没几个，很多遗憾。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新头像，Explosion</title>
    <link href="http://intii.com/2016/avatar-megumin-explosion/"/>
    <id>http://intii.com/2016/avatar-megumin-explosion/</id>
    <published>2016-12-20T15:02:40.000Z</published>
    <updated>2016-12-30T15:39:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了庆祝《为美好的世界献上祝福》第二季即将在一月开播，所以做了个惠惠版的头像。想要加入一些动作，头像主要参考了惠惠官方粘土人的宣传画。惠惠真是太棒了。<br><a id="more"></a></p>
<p><img src="/media/avatar-megumin.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了庆祝《为美好的世界献上祝福》第二季即将在一月开播，所以做了个惠惠版的头像。想要加入一些动作，头像主要参考了惠惠官方粘土人的宣传画。惠惠真是太棒了。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新头像，从寨大毕业</title>
    <link href="http://intii.com/2016/avatar-graduation-2016/"/>
    <id>http://intii.com/2016/avatar-graduation-2016/</id>
    <published>2016-04-18T11:58:45.000Z</published>
    <updated>2016-12-27T13:22:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>一不小心，就要从寨大毕业了。</p>
<a id="more"></a>
<p><img src="/media/avatar-graduation-2016.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一不小心，就要从寨大毕业了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新头像，圣诞节</title>
    <link href="http://intii.com/2015/avatar-christmas-2015/"/>
    <id>http://intii.com/2015/avatar-christmas-2015/</id>
    <published>2015-12-04T06:19:51.000Z</published>
    <updated>2017-04-27T04:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>圣诞节。<br><a id="more"></a><br><img src="/media/avatar-christmas-2015.jpg" alt="avatar-christmas-2015"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;圣诞节。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>公选课攻略：中西方美术鉴赏、认识肿瘤</title>
    <link href="http://intii.com/2015/public-course-walkthroughs-in-szu-s6/"/>
    <id>http://intii.com/2015/public-course-walkthroughs-in-szu-s6/</id>
    <published>2015-07-18T08:16:59.000Z</published>
    <updated>2016-12-25T09:24:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>总算到了大三的最后一个学期。因为懒我在大二的下学期一个公选课也没选，导致我这学期还得再修个 4 分才够毕业，在别人可能都只修了 10 分左右的大三下学期，我顶着 19 分的压力，还真是不好受，更别说这学期还考砸了，小看了某一科导致又拿了个 C，然后某一科居然给我了个 B，简直是无语……</p>
<p>不过也多亏了这 4 分，我得以在认识肿瘤的课上重遇了小学前期的同桌吴同学，虽然没好意思去打招呼，但还是很高兴的。</p>
<p>这学期的两门公选课的结果是，中西方美术鉴赏：B，认识肿瘤：A。</p>
<a id="more"></a>
<h2 id="中西方美术鉴赏"><a href="#中西方美术鉴赏" class="headerlink" title="中西方美术鉴赏"></a>中西方美术鉴赏</h2><p>鉴赏类课程是深大公选课中的热门课程，同一个系列的还有电影欣赏之类的看名字就知道是混着就能过的课程。但是，万万没想到，中西方美术鉴赏其实是这学期才开的一门新课，有大量美院的学生来凑热闹，论相关知识你不如他们，论与老师的关系你也不如他们，因此想得 A 还是比想象中的要难。</p>
<p>课程由 3 个老师负责，每人大概各有 6 周的样子，分别讲的是油画、雕塑和版画，前两个老师偶尔会点名，但版画的老师几乎是每次都点名。中途没有作业，所以相对还是很轻松的。上课会关灯，所以做不了作业，玩手机也很显眼。期末考试是课下写一篇 1,000 - 1,500 字的作品鉴赏，三个老师会各自选择一些相关的作品供学生选择，学生只需从所有作品中选择一个来写就可以了。这次给的作品中，油画给的貌似有一幅是课上讲过的，其它因为我没听课所以不清楚，而版画给的似乎都没有在课上出现过。</p>
<p>另外，大家选的貌似都是油画，所以油画的分数可能会相对较低哦……</p>
<p>作业在学期最后一节课提交，但最后一节课貌似还是要上的，虽然我翘掉了。</p>
<h2 id="认识肿瘤"><a href="#认识肿瘤" class="headerlink" title="认识肿瘤"></a>认识肿瘤</h2><p>教室宽敞明亮，是一门用来赶作业的好课（，这个课也是好多个老师一起讲，期末考试以开卷考试的形式进行，题目比较简单基本都能在 PPT 里面找到，但也别高兴的太早，因为这个课有十几个 PPT，每个又有七八十页，光是打印就得打印好多页，也正因如此我学会了如何正确的使用我家的打印机进行双面打印。</p>
<p>考试在最后一节课进行，考试前建议先预习一下，否则要在这么多张纸里面找到答案还是很困难的。该预习什么呢，至少得熟悉一下人体的各个器官属于什么系统吧，不要像我这样搞不清肝是什么系统的导致找不到答案。然后了解一下 PPT 是怎么安排的，比如说介绍一个具体的肿瘤，会先讲症状最后会讲预后什么的。至于打印的时候，为了省纸省墨，大可讲所有英文部分删去，图片也基本不需要留。</p>
<p>截至这学期，我已经修了现代教学论（文科学分）、产品设计欣赏（文科学分）、茶叶品鉴（理科学分）、积极心理学（文科学分）、中西方美术鉴赏（文科学分）、认识肿瘤（理科学分）共六门公选课，12 个学分（含 8 分文科学分），也就是说已经足够啦啦啦／</p>
<p>预祝抢课愉快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总算到了大三的最后一个学期。因为懒我在大二的下学期一个公选课也没选，导致我这学期还得再修个 4 分才够毕业，在别人可能都只修了 10 分左右的大三下学期，我顶着 19 分的压力，还真是不好受，更别说这学期还考砸了，小看了某一科导致又拿了个 C，然后某一科居然给我了个 B，简直是无语……&lt;/p&gt;
&lt;p&gt;不过也多亏了这 4 分，我得以在认识肿瘤的课上重遇了小学前期的同桌吴同学，虽然没好意思去打招呼，但还是很高兴的。&lt;/p&gt;
&lt;p&gt;这学期的两门公选课的结果是，中西方美术鉴赏：B，认识肿瘤：A。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
    
      <category term="深圳大学" scheme="http://intii.com/tags/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>公选课攻略：茶叶品鉴、积极心理学</title>
    <link href="http://intii.com/2015/public-course-walkthroughs-in-szu-s5/"/>
    <id>http://intii.com/2015/public-course-walkthroughs-in-szu-s5/</id>
    <published>2015-01-28T13:04:57.000Z</published>
    <updated>2016-12-25T09:25:06.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7kolop30.bkt.clouddn.com/TeaAndBrainsum.jpg" alt=""></p>
<p>早上起来看了下番然后发现出成绩了，因为本来就没有什么期望所以心情还算比较淡定，查询的人不多，一下子成绩就出来了，然后发现专业课都是 A，只有这两个公选课拖了我的后腿。茶叶品鉴拿了 B，积极心理学拿了 C……果然热门课不靠谱。</p>
<a id="more"></a>
<h2 id="茶叶品鉴"><a href="#茶叶品鉴" class="headerlink" title="茶叶品鉴"></a>茶叶品鉴</h2><p>茶叶品鉴绝对是个热门课啊，抢了几个学期才让我抢到了，直到我去上了这门课才发现上当了。这门课每节课上半节会讲很无聊的茶叶知识，偶尔老师会吹吹自己有多文艺带着古琴去旅游，然后晒晒自己过曝没构图没对焦的照片……然后下半节课让学生自己泡茶聊天。然后有一节课会讲著名伪科学实验水＊＊的＊密（太羞耻了我都不好意思把六个字都打出来），真个老师虽然是个法学院的老师，却坚信人类能够发功改变茶的味道(´･ω･｀)。接下来是攻略。</p>
<p>虽然不会点名，但是座位是在第二节课之后就固定下来的，所以不排除老师会自己解决签到的问题。前几节课会要求写品茶<strong>感悟</strong>，看到了吗「感悟」 加粗了哦，意思是茶的部分不重要，重要是得好好的写感悟才能有高分哦 。总共要写五次。</p>
<p>之后会布置一个课外的实践，要求组队，在 17 周之前完成，并写好实验报告或论文。在这里建议选择论文形式的实践，因为论文不要求图文并茂却在字数要求上只比实验报告多 500 个字。</p>
<p>中间会有一次期中考试，考的是泡茶的操作，考试前前一节课老师会演示一遍，考试前好像也会。大概会有三个老师监考，其中两个同时监考两个人，一个只监考一个人，监考两个人的老师可能会无视其中一个学生然后淡定的给出一个低分。</p>
<p>中途讲到的所有知识都是没有必要记下的，因为期末考试不会去考这些。期末考试分为两部分，第一部分是老师给出 5 种茶叶，学生写出茶叶的名字；第二部分是老师泡 5 种茶，学生喝了之后写出茶的名字。这些茶都是在每节课的后半节喝过的。不过完全无须为这个考试担心，因为这是开卷开手机能讨论的(๑‾ ꇴ ‾๑)</p>
<h2 id="积极心理学"><a href="#积极心理学" class="headerlink" title="积极心理学"></a>积极心理学</h2><p>下学期的选课里这门课貌似只剩下 MOOC 的版本了，MOOC 版本还要求考试，所以要是想混的话不推荐。</p>
<p>如果还能够选到常规版本的话，这课应该还是不错的，有几个老师讲课十分风趣。期末要求交一篇 5,000 字的论文，题目为上课时讲过的题目任选，根据 MOOC 版本的要求，应该是要写比较正式的那种论文，期末前两周交。中途只有几个老师会点名，也只是抽着点，没有作业，座位舒适，没有著名伪科学实验。</p>
<p>&nbsp;</p>
<p>预祝抢课愉快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/TeaAndBrainsum.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;早上起来看了下番然后发现出成绩了，因为本来就没有什么期望所以心情还算比较淡定，查询的人不多，一下子成绩就出来了，然后发现专业课都是 A，只有这两个公选课拖了我的后腿。茶叶品鉴拿了 B，积极心理学拿了 C……果然热门课不靠谱。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
    
      <category term="深圳大学" scheme="http://intii.com/tags/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>煮呀嘛煮咖啡</title>
    <link href="http://intii.com/2014/make-coffee-with-moka-pot/"/>
    <id>http://intii.com/2014/make-coffee-with-moka-pot/</id>
    <published>2014-09-02T15:24:58.000Z</published>
    <updated>2016-12-25T09:30:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7kolop30.bkt.clouddn.com/Tools-2-4px.jpg" alt=""></p>
<p><strong>2015-5-7：这家伙已经将摩卡壶扔进了柜子里，换用 Minipresso 了。</strong></p>
<p>之前因为买了个新杯子（虽然后来又换了个），突然想自己做咖啡喝，为了让这个决定更安全一些，买了一包粉还有一个法压壶，但法压壶也就只能泡泡单品咖啡，我还是比较喜欢加好多牛奶的那种。考虑了很久最后决定买个摩卡壶，然后一不小心又买了打奶壶和磨豆君，还换了个新杯子，开始了自己煮咖啡。</p>
<a id="more"></a>
<p>摩卡壶有好多种，最后为了有逼格又不砸钱，入了个比乐蒂的四人份的单阀<a href="http://www.bialetti.com/www.bialetti.com/coffee/stovetop/moka-express-c-1_7_22.html?zenid=3ec5612qe7488ig7d78l2gt9e1">八角摩卡壶</a>，但毕竟没有意式机出的咖啡那么正宗呢，虽然自己喝还是不错的，全手动的体验也挺有趣，就是比较耗时。我也不是没有考虑过意式机，甚至也去试过胶囊机……但是……</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Machines-2-4px.jpg" alt=""></p>
<p>但是真他娘亲的贵……胶囊机最少也得一千多吧，虽然相当方便，但没<del>逼格</del>意思，还是自己手动的好玩。而意式机呢，据说一千以下全都是玩具，入门推荐款也得一千六。而且意式机是个大坑啊，买了之后还得买个好的电动磨豆君，实在玩不起。于是咱还是踏踏实实的玩摩卡壶嗯。</p>
<p>网上的摩卡壶使用教程们的细节都很模糊，大火小火不知道到底是多大，加多少水也没有个确定的说法，什么时候关火、什么时候要大/小火也各执一词，但经过这些天的尝试，我觉得我做的还是挺好喝的（</p>
<p>我觉得用摩卡壶煮咖啡，首先得要有一包还不错的做 Espresso 的豆子。之前随手买了一包深度烘焙的粉，煮出来简直要苦死，加了奶还是像中药一样(´･ω･｀) 后来换了 <a href="http://www.amazon.cn/ILLY意利咖啡豆-250g/dp/B000VOCQPW/ref=sr_1_2?ie=UTF8&amp;qid=1409739550&amp;sr=8-2&amp;keywords=illy">illy</a> 的豆子，好喝了不少。根据摩卡壶的原理，加水不要超过气阀（除非想看爆炸），我一般都加到气阀以下大概一厘米的地方，出水大概小半杯的样子（我的杯子大概 300 mL），看心情加不要太多不要太少就好。有人说一开始加热水能防止过度萃取，反正我是这么干的，没有比较过，随意就好。按道理讲粉应该放满粉碗才好，但我比较省一般才放 16 g 左右（主要是磨得累），粉铺平，不要压，装好拧紧就能开始煮了。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Moka-Pot-2-4px.jpg" alt=""></p>
<p>煮的时候火不要超过壶底防止把壶烧坏了，等到流出的咖啡颜色变淡，或者你觉得咖啡出的差不多了，就可以关火了。网上有人建议关火后把壶放到湿布上降温，可以防止过度萃取。</p>
<p>综上所述就是 Follow your heart，想怎么煮怎么煮，煮坏了下次换一种方式，反正有“自己给自己做的肯定会好吃/喝”这种 buff。</p>
<p>在煮咖啡的过程中就可以打奶泡了。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Prepare-Milk-2-4px.jpg" alt=""></p>
<p>手打奶泡要先将牛奶加热到 60°C - 70°C（我会说我手贱买了个华氏度温度计吗），然后拼命地打，最后将最上层的大气泡们刮走，奶泡就好了。准备好杯子（我会在里面放一颗方糖），淋入咖啡，用小勺挡住打奶壶的口先将下层的牛奶倒入，最后倒入奶泡，一杯咖啡就完成了！</p>
<p>为了不浪费牛奶，可以用奶粉哦。然后法压壶被我拿去泡茶了。等我玩厌了再想想看要不要跟母上申请一台胶囊机（意式机坑太深就算了）。</p>
<p>不说了我的摩卡壶好像还没洗。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/Tools-2-4px.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015-5-7：这家伙已经将摩卡壶扔进了柜子里，换用 Minipresso 了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前因为买了个新杯子（虽然后来又换了个），突然想自己做咖啡喝，为了让这个决定更安全一些，买了一包粉还有一个法压壶，但法压壶也就只能泡泡单品咖啡，我还是比较喜欢加好多牛奶的那种。考虑了很久最后决定买个摩卡壶，然后一不小心又买了打奶壶和磨豆君，还换了个新杯子，开始了自己煮咖啡。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
    
      <category term="coffee" scheme="http://intii.com/tags/coffee/"/>
    
      <category term="咖啡" scheme="http://intii.com/tags/%E5%92%96%E5%95%A1/"/>
    
      <category term="摩卡壶" scheme="http://intii.com/tags/%E6%91%A9%E5%8D%A1%E5%A3%B6/"/>
    
  </entry>
  
  <entry>
    <title>其实 Magic Mouse 真的很好用</title>
    <link href="http://intii.com/2014/magic-mouse-is-actually-pretty-good/"/>
    <id>http://intii.com/2014/magic-mouse-is-actually-pretty-good/</id>
    <published>2014-07-19T16:35:01.000Z</published>
    <updated>2016-12-25T09:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://o7kolop30.bkt.clouddn.com/Artboard-1.png" alt="Magic Mouse"></p>
<p>总有人吐槽 <a href="https://www.apple.com/magicmouse/" title="Magic Mouse Introduction">Magic Mouse</a> 反人类不好用实在不能忍。</p>
<p>当初我还在用 Windows 的时候，就想要一个 Magic Mouse 了，于是在万能的淘宝上勇敢地找了一个卖的的极其便宜的卖家（幸好不是山寨货，到现在了都还能用。当年装了个驱动，滚动这个手势算是能用用，但是那些年 Windows 上哪有什么平滑滚动（现在看别人用数字公司的浏览器好像都能平滑滚动了），所以体验相当糟糕，但为了这<del>逼格</del>优秀的设计和考虑到以后一定要换一台 Mac，我还是忍了下来。</p>
<a id="more"></a>
<p>刚开始用手感确实不好，但这不过是习惯的问题，当熟练度提高到一定程度之后，就变成了一般的鼠标手感不好了（之前入的被用鼠标海拔太高简直不能用）。现在我抓握鼠标的姿势大概是将鼠标用拇指和无名指和它的隔壁夹住，并（主要）利用这几只手指来控制鼠标的移动，剩余的两只手指自然地搭在鼠标上。其实把手自然地放在平面上就是这种感觉，与握住普通鼠标的区别大概就是手掌与鼠标没接触吧。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Artboard-2.png" alt="How I grab the mouse"></p>
<p>配合 OSX 自带的 Magic Mouse 手势，Magic Mouse 就能实现一部分 Trackpad 的功能，比如说轻触鼠标两次实现 Smart Zoom，两指横扫实现 Desktop 的切换，页面滚动也比滚滑轮更加自然。现在我已经无法想象要在 Mac 上用一个传统的鼠标了。</p>
<p>配合 <a href="http://www.boastr.de" title="BetterTouchTool">BetterTouchTool</a> 能为 Magic Mouse 添加更多的手势从而充分的发挥它的的能力。例如三指上划开启 Mission Control、三指下划开启 Exposé、三指轻敲开启 Lookup、三指按下关闭指针下的窗口等功能都相当实用。</p>
<p>BetterTouchTool 比某些它的该类软件可定制成度更高，除了最多支持四指的各种手势可供选择之外，用户还可以为不同的程序设置不同的手势，比如在 Safari 里将三指按下重设为 Cmd+W 什么的。</p>
<p><img src="http://o7kolop30.bkt.clouddn.com/Screen-Shot-2014-07-18-at-5.48.08-pm.png" alt="除了给 Magic Mouse 增加手势，BetterTouchTool 还能为 Trackpad 增加手势或者增加快捷键。还有一些别的功能。"></p>
<p>对我来说这鼠标唯一的缺点就是玩游戏不行，但鉴于我玩游戏不多，随手弄个便宜而且比较扁平的鼠标就好了。</p>
<p>夏天手汗多，会影响手感，可以的话还是买一张磨砂贴膜贴（手感+20）在上面，建议买白色的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://o7kolop30.bkt.clouddn.com/Artboard-1.png&quot; alt=&quot;Magic Mouse&quot;&gt;&lt;/p&gt;
&lt;p&gt;总有人吐槽 &lt;a href=&quot;https://www.apple.com/magicmouse/&quot; title=&quot;Magic Mouse Introduction&quot;&gt;Magic Mouse&lt;/a&gt; 反人类不好用实在不能忍。&lt;/p&gt;
&lt;p&gt;当初我还在用 Windows 的时候，就想要一个 Magic Mouse 了，于是在万能的淘宝上勇敢地找了一个卖的的极其便宜的卖家（幸好不是山寨货，到现在了都还能用。当年装了个驱动，滚动这个手势算是能用用，但是那些年 Windows 上哪有什么平滑滚动（现在看别人用数字公司的浏览器好像都能平滑滚动了），所以体验相当糟糕，但为了这&lt;del&gt;逼格&lt;/del&gt;优秀的设计和考虑到以后一定要换一台 Mac，我还是忍了下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://intii.com/categories/Tech/"/>
    
    
  </entry>
  
  <entry>
    <title>Scribe The Amazing Clipboard Sharing App</title>
    <link href="http://intii.com/2014/scribe-the-amazing-clipboard-sharing-app/"/>
    <id>http://intii.com/2014/scribe-the-amazing-clipboard-sharing-app/</id>
    <published>2014-05-02T14:16:59.000Z</published>
    <updated>2016-12-25T08:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近试用了两款剪贴板分享的 app：<a href="http://usescribe.com">Scribe</a> 和 <a href="http://danilo.to">Command-C</a>，Scribe 貌似是最近一次更新才加入了加入了现在主打的功能，支持 BTLE 和不用打开 app 就能接收信息，而 Command-C 呢就是一款广受好评利用 Wifi 来分享剪贴板的 app，同样 app 也不需要开启就能接受信息。</p>
<p>我起初是发现 Scribe 还是免费的时候我就收过这款 app，于是就下载来看看，发现它真是厉害的不得了，只是经常找不到设备，一怒之下我才花了四刀买了 Command-C。然后发现 Command-C 也是那德性，而且功能上，完全比不上 Scribe。</p>
<p>比如说 Command-C 需要先复制内容到剪贴板才能发送到其它设备，而且整个发送操作需要键盘操作三次（Command+Shift+X - Down - Enter），而 Scribe，只需要选中文字就能用一个组合键（Command+Shift+X）将选中文字发送到手机上了，而且还能利用各种内置的 URL Scheme 来实现各种功能，而且啊而且，发送过来后选中文字就直接在手机的剪贴板里了，于是当手机收到推送之后，不用开启 app，直接粘贴就好了！！</p>
<p>经过各种 unpair-repair 之后，现在 Scribe 总算能正常的找到设备了。如果你需要一款这种类型的 app，Scribe 绝对值目前最好的选择，现在只需三刀，如果嫌贵，不妨先到 App Store 的 Purchased 里看看以前是不是戳过了（</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近试用了两款剪贴板分享的 app：&lt;a href=&quot;http://usescribe.com&quot;&gt;Scribe&lt;/a&gt; 和 &lt;a href=&quot;http://danilo.to&quot;&gt;Command-C&lt;/a&gt;，Scribe 貌似是最近一次更新才加入了加入了现在主打的功能，支持 BTLE 和不用打开 app 就能接收信息，而 Command-C 呢就是一款广受好评利用 Wifi 来分享剪贴板的 app，同样 app 也不需要开启就能接受信息。&lt;/p&gt;
&lt;p&gt;我起初是发现 Scribe 还是免费的时候我就收过这款 app，于是就下载来看看，发现它真是厉害的不得了，只是经常找不到设备，一怒之下我才花了四刀买了 Command-C。然后发现 Command-C 也是那德性，而且功能上，完全比不上 Scribe。&lt;/p&gt;
&lt;p&gt;比如说 Command-C 需要先复制内容到剪贴板才能发送到其它设备，而且整个发送操作需要键盘操作三次（Command+Shift+X - Down - Enter），而 Scribe，只需要选中文字就能用一个组合键（Command+Shift+X）将选中文字发送到手机上了，而且还能利用各种内置的 URL Scheme 来实现各种功能，而且啊而且，发送过来后选中文字就直接在手机的剪贴板里了，于是当手机收到推送之后，不用开启 app，直接粘贴就好了！！&lt;/p&gt;
&lt;p&gt;经过各种 unpair-repair 之后，现在 Scribe 总算能正常的找到设备了。如果你需要一款这种类型的 app，Scribe 绝对值目前最好的选择，现在只需三刀，如果嫌贵，不妨先到 App Store 的 Purchased 里看看以前是不是戳过了（&lt;/p&gt;
    
    </summary>
    
      <category term="Tech" scheme="http://intii.com/categories/Tech/"/>
    
    
      <category term="App" scheme="http://intii.com/tags/App/"/>
    
  </entry>
  
  <entry>
    <title>最近买了副降噪耳机</title>
    <link href="http://intii.com/2014/bought-a-pair-of-sony-nc100d-recently/"/>
    <id>http://intii.com/2014/bought-a-pair-of-sony-nc100d-recently/</id>
    <published>2014-03-19T13:58:57.000Z</published>
    <updated>2016-07-14T15:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从下载了 <a href="http://castro.fm">Castro</a> 这款优秀的 Podcast app，我便开始了每天听着 Podcast 上课的校园生活。</p>
<p>从前我一直没有太在意耳机，要是外头太吵，我不听就罢了，但是我渐渐发现这个星球上想找个不吵的地方太难了，再经过上次坐飞机的惨痛经历，我开始考虑买一只降噪耳机。尤其作为一个每周都要回家<del>一分钟都不想呆在学校，</del>甚至想着要是大三课少就把宿舍退掉而经常需要花好几十分钟晃十几个站回家的学生，拥有一副降噪耳机实在是一件再好不过的事情了。</p>
<a id="more"></a>
<p>我对降噪耳机的要求也不高</p>
<ol>
<li>价格不贵</li>
<li>样子能看</li>
<li>能戴上</li>
<li>有效果，但保留一定的外界的声音</li>
</ol>
<p>我发现我真是太机智了，第一点和第四点简直就是一个意思嘛，于是我完全没考虑 BOSE 家的那几款，在亚马逊和京东还有 Google 上经过一番搜索之后发现不是相当贵、评价又还凑合、样子还可以、效果又不算太好的就只有 <a href="http://www.amazon.cn/SONY-索尼-MDR-NC100D-MCN-黑色-降噪耳机/dp/B008TN5V7M/ref=sr_1_1?ie=UTF8&amp;qid=1395237325&amp;sr=8-1&amp;keywords=nc100d">Sony NC100D</a> 了。这是一副入耳式主动降噪耳机，吃七号电池，没电时也能够当做普通耳机使用。唯一担心的就是戴不稳。</p>
<p>以前我也买过一副入耳式耳机，但一直戴不稳，幸好 NC100D 的耳塞设计比较类似于于 Apple 的 Earpods，能抵住耳朵的<a href="https://www.google.com/search?q=对耳屏&amp;newwindow=1&amp;sa=X&amp;biw=1280&amp;bih=633&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;ei=IqIpU6LYNZL1oATKxoDgCQ&amp;ved=0CEoQsAQ">对耳屏</a>防止耳塞被挤出来，所以戴起来还是挺稳的。戴入后异物感不大，听诊器效应也不大。而且戴久了之后，我的脑洞被撑大了，耳机也不再掉出来了。</p>
<p>音质怎样呢？作为一个木耳，我不知道。但是降噪效果是十分明显的。开启降噪之后，走在大街上除非车从你面前呼啸而过，否则只能听见很轻的引擎声。在地铁上也能去掉大概 50%+ 的轰鸣声，对于听播客来说是足够了，音量开到四格就能听了。降噪耳机们对人声都没有很好的效果，据我常年混肯德基的经验，开启降噪后依然能听到响亮的人声（被耳塞阻挡了不少），但是听起来很模糊，也算是能起到些作用吧。</p>
<p>电池我用的是 Eneloop 的<a href="http://www.amazon.cn/SANYO-三洋-爱乐普eneloop-7号高容量充电电池黑色XX系列4节装-950毫安-HR-4UWXB-4TC/dp/B00AGB3LX6/ref=sr_1_1?ie=UTF8&amp;qid=1395237457&amp;sr=8-1&amp;keywords=eneloop+7">黑不溜秋的 7 号电池</a>，一周大概换一次电池就够了。</p>
<p>开启降噪后耳机会发出一些沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙沙的声音，嘛当做雨声就好（</p>
<p>唯一让我不解的是插到 Mac 上关掉降噪都会有沙沙声，很烦呢这点。没线控这点也是……现在我都是通过拔耳机来暂停的了……</p>
<p>如果没有什么大降价的话，这耳机估计能列在「我今年买到最值的东西」里面，虽然效果肯定完全比不上 BOSE 家的降噪耳机，但考虑到价格差和效果，还是一款很值得考虑的产品。为了自己耳朵着想，也为了能利用上地铁里的一些时间听听播客、玩玩太鼓达人，买一对降噪耳机才不是什么坏事呢(￣▽￣)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从下载了 &lt;a href=&quot;http://castro.fm&quot;&gt;Castro&lt;/a&gt; 这款优秀的 Podcast app，我便开始了每天听着 Podcast 上课的校园生活。&lt;/p&gt;
&lt;p&gt;从前我一直没有太在意耳机，要是外头太吵，我不听就罢了，但是我渐渐发现这个星球上想找个不吵的地方太难了，再经过上次坐飞机的惨痛经历，我开始考虑买一只降噪耳机。尤其作为一个每周都要回家&lt;del&gt;一分钟都不想呆在学校，&lt;/del&gt;甚至想着要是大三课少就把宿舍退掉而经常需要花好几十分钟晃十几个站回家的学生，拥有一副降噪耳机实在是一件再好不过的事情了。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
    
  </entry>
  
  <entry>
    <title>北海道之行</title>
    <link href="http://intii.com/2014/a-trip-to-hokkaido/"/>
    <id>http://intii.com/2014/a-trip-to-hokkaido/</id>
    <published>2014-02-10T17:26:55.000Z</published>
    <updated>2016-12-25T09:39:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次去霓虹国旅游是中考结束之后的那个暑假，大概是去了东京呀富士山呀那一带，除了台场的 1:1 高达 RX78 和富士极乐园的鬼屋还有紧凑而舒适的旅馆就没什么别的印象了。今年因为实在无聊，就决定跟母上去一趟旅游，再因为长这么大还没看过雪，就决定再去一次日本，这次去北海道！</p>
<p>我们从宝安机场的新航站楼直飞札幌的新千岁机场，最后从带广小机场飞回寨都，实施一种先购物再逛景点的作死行程。</p>
<a id="more"></a>
<p><img src="http://o7kolop30.bkt.clouddn.com/Artboard-1-1.png" alt=""></p>
<p>因为是第一次去下雪的地方，所以得做许多准备，该穿什么衣服网上基本上随便就能搜到，据经验者所言，因为北海道室内外温差相当大（室内大概有二十几度的样子），所以应该采用<a href="http://www.baike.com/wiki/洋葱式穿衣法">洋葱式穿法</a>，进屋就脱。但到达北海道时才发现也没有他们说的那么夸张，五天来我都是三件衣服两条裤子，偶尔戴戴围巾帽子。网上很多人建议穿雪裤，怕的是湿了难干，但实际上我这几天都在穿牛仔裤，表示从来没有弄湿过，其实在进入室内以前把雪拍掉就好了。墨镜如果不滑雪实在没有必要。</p>
<p>网上还有说在寒冷天气下电池更耗电的事情，五天我相机总共用了四颗电池，没有充过电，其中还有一颗是因为网上有人建议保持相机关机更省电然后忘记关机而用完的。所以如果你不是按快门狂魔，准备两颗电池每天充大概也足够了。倒是手机耗电异常快。</p>
<p>北海道这种乡下地方的酒店只有大堂有 wifi，如果想在北海道期间还能安逸的上网的话可以买当地的 Sim 卡，我买的是今年才出现的 DarumaSim 达摩卡，比较便宜但速度很慢（枉我还推荐给别人 <del> 来当我的小白鼠 </del> 了呢）。只能用来上网。另外还有 b-mobile 可以选择。</p>
<h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>早上的班机所以一大早就得起来了<em>(:3 」∠)</em>迷迷糊糊的穿好衣服拿好行李却忘了带耳机，到了宝安机场 T3 航站楼想看看有没有耳机卖，但都是入耳和头戴的啊（可以在中信书店买到哦），我的耳朵戴不进去，于是只好凑合用送我们来的姨丈的借我耳机（还是入耳的（而且是三爽的（而且线控完全不能用）））……</p>
<p>见到导游后导游还给我了一个红包（</p>
<p>整个团大概有七家人的样子，其中两家人数过十，没有什么可爱的萝莉正太，隔壁团倒是有个很口耐的。</p>
<p>飞了大概 5 个小时，总算到了新千岁机场，那时差不多五点，北海道的天空已经暗下来了，所以当我们到达第一个景点大通公园已经是晚上了，而且冰雕节将近开幕根本就进不去……最后嘛都看不到。瞎逛了几十分钟去吃了一顿烤肉然后就没然后了，第一天就被旅行社混过去了。</p>
<p>然后我发现达摩卡在 iPhone 5s 上无法开 Personal Hotspot，邮件询问后他们也承认了。</p>
<p>第一天气候温和没有下雪，温度大概在零度的样子。</p>
<p>[caption id=”” align=”alignnone” width=”957”]<img src="https://lh3.googleusercontent.com/-risW0vhUnHs/Uviu1LamhGI/AAAAAAAAArU/-4v6Zdc05sY/w957-h538-no/DSCF0050+%25281%2529.jpg" alt=""> 没东西看的大通公园[/caption]</p>
<h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>由于昨天晚上实在没时间了，将到狸小路买东西的行程调到了第二天一早，买了些白色恋人，还有的人买了电饭煲和马桶座，没什么感觉的一个地方，一大早就没几家店开了门。</p>
<p>中午去了旭川拉面村吃拉面，那里的拉面非常咸，非常非常咸，而且拉面村怎么只有四家店呀，这也能叫村呀。</p>
<p>然后去了旭川动物园看企鹅游行，这才几只企鹅啊，这也能叫游行啊……</p>
<div class="gallery3">  <img src="http://farm3.staticflickr.com/2853/12433457725_b711be4b97_b.jpg" alt=""> <img src="http://farm4.staticflickr.com/3701/12435590954_acca825b5b_b.jpg" alt=""> <img src="https://lh6.googleusercontent.com/-BC7MmyFbY-E/UyQI5Jj2VRI/AAAAAAAAAvE/nqZAnxupK4E/w815-h543-no/DSCF0121.jpg" alt=""></div>

<p>晚上又去什么层云峡冰瀑祭，这特么也能叫冰雕啊……</p>
<p>总之第二天又是怀着一股怨念住进了酒店。这天睡的是榻榻米。</p>
<p>[caption id=”” align=”alignnone” width=”819”]<img src="https://lh3.googleusercontent.com/-JTHqrzOoPaQ/Uvjk9VfzdlI/AAAAAAAAAr8/kK40kbHymrE/w819-h546-no/DSCF0129.jpg" alt=""> 挺干净的<em>(:3 」∠)</em>[/caption]</p>
<p>这个酒店有温泉哦，24 小时开放哦，但咱这种见到上半身裸着的人都受不了的人最后还是没去，不过其实过了 24 点基本就没人去泡了。总有人说我好浪费……我觉得旅游自己开心就好，没必要因为团里包了这个就强迫自己去做嘛。（今天这个温泉据线报所言相当小）</p>
<h1 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h1><p>第三天的活动看起来好很多，这是我第二天看行程表时的想法，但是早上去看的瀑布和监狱博物馆都一般般，瀑布都结冰了看上去就白花花一片，网走鉴于博物馆嘛，也不是我想象中的那种东西……</p>
<div class="gallery2"><img src="https://lh5.googleusercontent.com/-pfx6rQ9_FVo/UyQJPHPd2VI/AAAAAAAAAvU/epArANewSZI/w815-h543-no/DSCF0134.jpg" alt=""> <img src="http://farm4.staticflickr.com/3692/12435593094_9e1a402c45_b.jpg" alt=""></div>

<div class="dark"><br><br>我一开始还以为是参观监狱呢……其实只是保留了建筑而已，还莫名其妙的弄了一堆人的模型摆在那里充囚犯，嘛这博物馆怎么看怎么随便，一点也没有监狱的样子。<br><br></div>

<p>中午去吃火锅之类的的东西，我们和另一家人一起弄了一只皇帝蟹来吃，腿生吃，好恶心，母上却说好好吃。</p>
<p><img src="https://lh4.googleusercontent.com/-G5i6UQFayDM/Uvjm8J4rPPI/AAAAAAAAAsQ/yP0rxyXyw60/w958-h470-no/DSCF0150.jpg" alt=""></p>
<p>下午的活动非常赞，是破冰船噢www，虽然当天没有冰，但是甲板上可是有好多飞得好近的海鸥呢，这使得只带了一台 35mm 定焦相机的我也能打打鸟了233。</p>
<div class="gallery3"><img src="http://farm8.staticflickr.com/7421/12437065314_cd9db9d124_b.jpg" alt=""> <img src="http://farm3.staticflickr.com/2884/12437063494_b4659cd917_b.jpg" alt=""> <img src="http://farm4.staticflickr.com/3761/12437064114_c83fdf6cfa_b.jpg" alt=""></div>

<div class="dark"><br><br>毕竟是没拍过鸟，由于快门选得太慢了好多都糊了。因为带着手套各种不方便和懒，对于在天上飞的鸟我用超焦距来省下了每次对焦的步骤，停在船上的则用自动对焦解决……经过这次才发现独立光路 OVF 是那么的有用呀，在鸟类进入镜头之前就能看到它们并判断它们什么时候会进入镜头范围。<br><br>这些海鸥不怎么怕人，一停下来就能停好久。<br><br></div>

<p>于是我就一直呆在甲板上了，完全忘了这是破冰船，下船后才知道这次海上根本没有冰，团员们也因此相当愤怒，确实本身形成里就注明若因天气原因无法乘坐破冰船就改成参观流冰馆，在这种海上没有冰的天气导游就应该随机应变嘛。</p>
<p>晚上我们到达了新阿寒酒店，这是这次旅行之中最好的酒店了，但还是只有大堂有 wifi，如果想在房间里（或者外头）也能用上网络，那可以 500JPY/day 租一台 mifi，我们租了一台，速度相当不错，不用跨栏就能看B站。晚饭也是吃酒店里的自助餐，餐厅可以望见阿寒湖，晚上阿寒湖上会放烟花wwwwww</p>
<p>这家酒店的温泉在顶楼，但似乎晚上露天温泉不开。</p>
<h1 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h1><p>早上在结了冰的阿寒湖上走了走之后便去了附近的阿衣努族民族村，发现日本人真的什么都能叫「村」呢，明明这么小……房子可能还有点历史，但都变成卖纪念品的小店了。</p>
<div class="gallery2"><img src="http://farm8.staticflickr.com/7356/12437064084_60cc9c3a63_b.jpg" alt=""> <img src="http://farm6.staticflickr.com/5529/12437064064_fe32b571e7_b.jpg" alt=""></div>

<p>然后因为一边看天一边走摔了一跤，幸好衣服厚没什么感觉。</p>
<p>这里必须说一下呢有积雪的地方比较好走，尽量不要走到冰上呢，相当滑，有时会看到路上有好多黑色的小石子，那是人为撒上去防滑的，但没什么用。如果想要昂首挺胸大步向前，可以到便利店里买套在鞋子上的防滑垫（套？）哦。</p>
<p>可能就一圈跑道的大小，转眼就绕了一圈，一大早店都没开门，属于一个没什么意义的景点呢。</p>
<p>接着我们就出发去全程最佳景点屈斜路湖了。好怪的名字呀。</p>
<p>据介绍因为屈斜路湖有地热，湖水比较暖，所以没有结冰，所以有鹅会飞到这边来，所以会非常漂亮，但是呀，岸上也太特么的冷了，冻的我直发抖，但真的漂亮，看着真的会有一种心旷神怡，宠辱偕忘的感觉。</p>
<div class="gallery3"><img src="http://farm8.staticflickr.com/7349/12438672823_d2a550dd15_b.jpg" alt=""><img src="http://farm6.staticflickr.com/5487/12438671393_cb79706037_b.jpg" alt=""><img src="http://farm8.staticflickr.com/7459/12438672143_c54ddec6ff_b.jpg" alt=""></div>

<p>除了屈斜路湖，剩余的美景基本上都集中在了路上，只能隔着窗看看了（轮自由行的好处）。</p>
<p>中午去了一家似乎是司机先生推荐的店吃饭，咱要了一份炸猪排定食，分量充足味道鲜美，店主还好心地给我们提供了免费的饮料。不得不说北海道人真的又热情又有礼貌(つдC)，霓虹语听起来也非常润耳，在表现礼貌将音调抬高的同时完全没有台腔那种刺耳感。</p>
<p>啊对了早上还去了摩周湖来着差点忘了，因为只能站在瞭望台上看所以印象不是很深刻呢，完全比不上屈斜路湖。</p>
<p>之后去看鹤看湿原完全无感，总有种旅行社在凑景点的感觉。晚上买了一瓶咖啡牛奶看着芦田爱菜的电视剧度过了在北海道的最后一个晚上。</p>
<h1 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h1><p>一般来说出来旅游我都会找一天一大早起来出去四处走走，但北海道室内温度实在太适合睡觉，所以总是起不来，最后一天也不例外……最后一天是逛商场呢。</p>
<p>因为逛商场实在无聊，所以我就利用这两个半小时到外面走了走。北海道这种乡下地方没什么人非常安静，个人也很喜欢挂在杆子上的电线233。</p>
<div class="full-width-image"><img src="https://lh4.googleusercontent.com/-PoUKkoWp_vA/UvjnFfOg13I/AAAAAAAAAsY/SZ9SuGtOimI/s2560/DSCF0352.jpg" alt=""></div>

<p>这家商场里面基本没电器卖，但旁边有一家叫 100 什么的卖的基本上都是电器，我上去看了看没发现柜台里有 WCL-X100，又懒得问，所以就算了。这里虽然也有电饭煲卖，但都不是 220V 的。</p>
<p>中午吃完牛肉之后，便去了行程里最后一个景点：幸福车站。</p>
<div class="gallery3"><img src="http://farm4.staticflickr.com/3815/12438673353_c74b820175_b.jpg" alt=""> <img src="http://farm6.staticflickr.com/5540/12438675033_c17d341631_b.jpg" alt=""> <img src="http://farm4.staticflickr.com/3669/12438675933_90a7a77887_b.jpg" alt=""></div>

<div class="dark"><br><br>与预期不太一样呢……车厢似乎可以上去（反正我上去了），周围的景色也不错<br><br></div>

<p>离开幸福车站之后，我们就开始为了好的座位而向带广机场飞奔了。</p>
<p>带广机场是一个相当小的的机场，里头只有两家卖零食的免税店、一台 X 光机和两个登机口，于是 500+ 个人在这个机场里挤死了。</p>
<p>但这小机场还是很有趣的，在登机之前他们还会发牛奶哦，有冷有热任君选择。</p>
<p>东九区六点起飞大概六个小时，我们终于回到了寨都。新航站楼的效率和带广小机场差不多，出行李花了差不多一个小时。</p>
<p>当天，大通公园的冰雕节已经开幕了，我总觉得，这行程应该反过来才对吧……</p>
<div class="dark"><br><br>总的来说这次旅游还是不错的，我也算是一个见过雪的人类了(·̀ᴗ·́)و ̑̑<br><br>把 3DS 和 Kindle 带过去基本都没用上，iPhone 里存的一堆 Podcast 也基本没听<br><br>旅游是好，但我下次才不要参加什么 500 人的包机团呢，每天抢电梯都快挂了，上了飞机大家都没熄火吵得简直像是菜市场一样……<br><br>还有南航的飞机真渣渣（我要坐皮卡丘飞机！！）<br><br></div>

]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次去霓虹国旅游是中考结束之后的那个暑假，大概是去了东京呀富士山呀那一带，除了台场的 1:1 高达 RX78 和富士极乐园的鬼屋还有紧凑而舒适的旅馆就没什么别的印象了。今年因为实在无聊，就决定跟母上去一趟旅游，再因为长这么大还没看过雪，就决定再去一次日本，这次去北海道！&lt;/p&gt;
&lt;p&gt;我们从宝安机场的新航站楼直飞札幌的新千岁机场，最后从带广小机场飞回寨都，实施一种先购物再逛景点的作死行程。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
      <category term="Featured" scheme="http://intii.com/categories/Essay/Featured/"/>
    
    
  </entry>
  
  <entry>
    <title>公选课攻略：产品设计欣赏、现代教学论</title>
    <link href="http://intii.com/2014/public-course-walkthroughs-in-szu-s3/"/>
    <id>http://intii.com/2014/public-course-walkthroughs-in-szu-s3/</id>
    <published>2014-01-21T17:21:24.000Z</published>
    <updated>2016-07-14T15:45:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>深大另一个十分让人讨厌的地方就是公选课，虽然多种多样连「印度电影欣赏」这种课都有，但除了语言类的大概都没什么料。语言课这种既热门又有用的课不知道是哪个领导想出来要开这么少课的，德语好像还不是每个学期都有，所以就咱的人品是死活也抢不到了。原本打算选一堂外教的课来玩玩，却被朋友阻止了，他说他有个朋友上学期选了门外教课，然后挂了<span style="font-family: georgia, palatino;"><em>(:.̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̨̨̨̨̨̨̨̨̨̨̨̨.̸̸̨̨」∠)</em> </span>。之后经过一番搜索总算找到两门不热门还很好混学分的课。</p>
<a id="more"></a>
<h2 id="产品设计欣赏"><a href="#产品设计欣赏" class="headerlink" title="产品设计欣赏"></a>产品设计欣赏</h2><p>老师是个果粉，讲了好几节课的水果，还会用 Airplay 来上课，难得的是他用 Evernote。</p>
<p>课程内容就是看看幻灯片听他吹吹水然后看几节课视频之类的，不算无聊，可以拿来写作业。每节课都会抽着点名。</p>
<p>期末考试是做一个 PPT，介绍五个好的产品五个糟糕的产品，每个产品只能用一页（我去），每个产品至少有两张自己拍的图片（哪里放得下！！！），最后发到他邮箱。这是咱这次的题目，具体怎样会在考试周前两三周给出。</p>
<p>似乎 PPT 的版式也会对分数有影响，但是在某次看完大英课别的同学的 Presentation 之后，看来很多同学以前都没怎么接触过 PPT 呢（寨中毕业表示233），不用浪费时间弄动画，没人知道他是怎么看 PPT 的，咱没有动画也能拿 A。</p>
<h2 id="现代教学论"><a href="#现代教学论" class="headerlink" title="现代教学论"></a>现代教学论</h2><p>是一个国产的老师，但是喜欢讲英语，不是每个学期都有，属于老师太无聊自己开的课，请自备耳机。</p>
<p>老师自称在英国留过学，但英语奇烂，发音难听，经常停顿，用词不科学，用英语教材来讲课却不事先查自己不懂的词然后上课卖萌。因为他要强调这种活跃而不死板的课堂所以乃做什么都可以，可以拿来写作业或者玩 Bejeweled。课后有时会布置作业，就是写写对上课提到的一些概念的理解，Google 即可解决。</p>
<p>考试前两周会给出考试范围（也就是题目），回家 Google 出答案然后打印出来考试就无忧了。考试是写试卷，两篇教学评价，几道判断题，然后是几道简答题。</p>
<p>每节课后都要签到。</p>
<p>此处有某校使用的<a href="http://edu.nenu.edu.cn/jpk/jiaoshi/mulu_new.htm">《教室学与教学论》</a>教材，可找到大部分答案。</p>
<p>&nbsp;</p>
<p>预祝抢课愉快。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深大另一个十分让人讨厌的地方就是公选课，虽然多种多样连「印度电影欣赏」这种课都有，但除了语言类的大概都没什么料。语言课这种既热门又有用的课不知道是哪个领导想出来要开这么少课的，德语好像还不是每个学期都有，所以就咱的人品是死活也抢不到了。原本打算选一堂外教的课来玩玩，却被朋友阻止了，他说他有个朋友上学期选了门外教课，然后挂了&lt;span style=&quot;font-family: georgia, palatino;&quot;&gt;&lt;em&gt;(:.̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̸̨̨̨̨̨̨̨̨̨̨̨̨.̸̸̨̨」∠)&lt;/em&gt; &lt;/span&gt;。之后经过一番搜索总算找到两门不热门还很好混学分的课。&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://intii.com/categories/Essay/"/>
    
    
      <category term="深圳大学" scheme="http://intii.com/tags/%E6%B7%B1%E5%9C%B3%E5%A4%A7%E5%AD%A6/"/>
    
  </entry>
  
</feed>
